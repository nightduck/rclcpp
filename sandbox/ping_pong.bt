#!/snap/bin/bpftrace

#include <linux/sched.h>

BEGIN {
	@OVERHEAD = 0;
	@TIMER = 1;
	@HIPING = 2;
	@LOPING = 3;
	@HIPONG = 4;
	@LOPONG = 5;
	@init = 0;
}

uprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PingNode::send_ping()" {
	// Stats collection and reseting variables
	if (@init != 0) {
		@time_per_state_avg[@OVERHEAD] = avg(@time_in_state[@OVERHEAD]);
		@time_per_state_avg[@TIMER]    = avg(@time_in_state[@TIMER]);
		@time_per_state_avg[@HIPING]   = avg(@time_in_state[@HIPING]);
		@time_per_state_avg[@LOPING]   = avg(@time_in_state[@LOPING]);
		@time_per_state_avg[@HIPONG]   = avg(@time_in_state[@HIPONG]);
		@time_per_state_avg[@LOPONG]   = avg(@time_in_state[@LOPONG]);

		@time_per_state_min[@OVERHEAD] = min(@time_in_state[@OVERHEAD]);
		@time_per_state_min[@TIMER]    = min(@time_in_state[@TIMER]);
		@time_per_state_min[@HIPING]   = min(@time_in_state[@HIPING]);
		@time_per_state_min[@LOPING]   = min(@time_in_state[@LOPING]);
		@time_per_state_min[@HIPONG]   = min(@time_in_state[@HIPONG]);
		@time_per_state_min[@LOPONG]   = min(@time_in_state[@LOPONG]);

		@time_per_state_max[@OVERHEAD] = max(@time_in_state[@OVERHEAD]);
		@time_per_state_max[@TIMER]    = max(@time_in_state[@TIMER]);
		@time_per_state_max[@HIPING]   = max(@time_in_state[@HIPING]);
		@time_per_state_max[@LOPING]   = max(@time_in_state[@LOPING]);
		@time_per_state_max[@HIPONG]   = max(@time_in_state[@HIPONG]);
		@time_per_state_max[@LOPONG]   = max(@time_in_state[@LOPONG]);

		@time_per_state_hist[@OVERHEAD] = lhist(@time_in_state[@OVERHEAD], 0, 15000000,	50000);
		@time_per_state_hist[@TIMER]    = lhist(@time_in_state[@TIMER],    0, 15000000,	50000);
		@time_per_state_hist[@HIPING]   = lhist(@time_in_state[@HIPING],   0, 15000000, 50000);
		@time_per_state_hist[@LOPING]   = lhist(@time_in_state[@LOPING],   0, 15000000, 50000);
		@time_per_state_hist[@HIPONG]   = lhist(@time_in_state[@HIPONG],   0, 15000000,	50000);
		@time_per_state_hist[@LOPONG]   = lhist(@time_in_state[@LOPONG],   0, 15000000,	50000);

		if (@lopong_end > @hipong_end) {
			@end_to_end_avg  = avg(@lopong_end - @timer_start);
			@end_to_end_min  = min(@lopong_end - @timer_start);
			@end_to_end_max  = max(@lopong_end - @timer_start);
			@end_to_end_hist = lhist(@lopong_end - @timer_start,   0, 25000000,	50000);
		} else {
			@end_to_end_avg  = avg(@hipong_end - @timer_start);
			@end_to_end_min  = min(@hipong_end - @timer_start);
			@end_to_end_max  = max(@hipong_end - @timer_start);
			@end_to_end_hist = lhist(@hipong_end - @timer_start,   0, 25000000,	50000);
		}
	} else {
		@init = 1
	}
	
	@time_in_state[@OVERHEAD] = (uint64)0;
	@time_in_state[@TIMER]    = (uint64)0;
	@time_in_state[@HIPING]   = (uint64)0;
	@time_in_state[@LOPING]   = (uint64)0;
	@time_in_state[@HIPONG]   = (uint64)0;
	@time_in_state[@LOPONG]   = (uint64)0;
	

	$last_state = @state[tid];
	if ($last_state != -1) {
		@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
		@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	}
	@state[tid] = 1;
	@last_state_change[tid] = nsecs;

	/////////////////

	

	@timer_start = nsecs;

	//printf("enter timer %lu on %d\n", nsecs, tid);
}
uretprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PingNode::send_ping()" {
	$last_state = @state[tid];
	@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
	@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	@state[tid] = @OVERHEAD;
	@last_state_change[tid] = nsecs;

	@timer_avg[tid, comm] = avg(nsecs - @timer_start);

	//printf("exit timer %lu on %d\n", nsecs, tid);
}
uprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PongNode::high_ping_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	if ($last_state != -1) {
		@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
		@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	}
	@state[tid] = 2;
	@last_state_change[tid] = nsecs;

	@hiping_start = nsecs;

	//printf("enter hiping %lu on %d\n", nsecs, tid);
}
uretprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PongNode::high_ping_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
	@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	@state[tid] = @OVERHEAD;
	@last_state_change[tid] = nsecs;

	@hiping_avg[tid, comm] = avg(nsecs - @hiping_start);

	//printf("exit hiping %lu on %d\n", nsecs, tid);
}
uprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PongNode::low_ping_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	if ($last_state != -1) {
		@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
		@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	}
	@state[tid] = 3;
	@last_state_change[tid] = nsecs;

	@loping_start = nsecs;

	//printf("enter loping %lu on %d\n", nsecs, tid);
}
uretprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PongNode::low_ping_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
	@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	@state[tid] = @OVERHEAD;
	@last_state_change[tid] = nsecs;

	@loping_avg[tid, comm] = avg(nsecs - @loping_start);

	//printf("exit loping %lu on %d\n", nsecs, tid);
}
uprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PingNode::high_pong_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	if ($last_state != -1) {
		@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
		@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	}
	@state[tid] = 4;
	@last_state_change[tid] = nsecs;
	
	@hipong_start = nsecs;

	//printf("enter hipong %lu on %d\n", nsecs, tid);
}
uretprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PingNode::high_pong_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
	@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	@state[tid] = @OVERHEAD;
	@last_state_change[tid] = nsecs;

	@hipong_avg[tid, comm] = avg(nsecs - @hipong_start);
	@hipong_end = nsecs;

	//printf("exit hipong %lu on %d\n", nsecs, tid);
}
uprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PingNode::low_pong_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	if ($last_state != -1) {
		@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
		@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	}
	@state[tid] = 5;
	@last_state_change[tid] = nsecs;

	@lopong_start = nsecs;

	//printf("enter lopong %lu on %d\n", nsecs, tid);
}
uretprobe:/proc/10373/root/workspaces/rclcpp/build/sandbox/ping_pong:"sandbox::PingNode::low_pong_received(std::shared_ptr<std_msgs::msg::Int32_<std::allocator<void> > const>)" {
	$last_state = @state[tid];
	@time_in_state_by_thread[tid, $last_state] += (nsecs - @last_state_change[tid]);
	@time_in_state[$last_state] += (nsecs - @last_state_change[tid]);
	@state[tid] = @OVERHEAD;
	@last_state_change[tid] = nsecs;

	@lopong_avg[tid, comm] = avg(nsecs - @lopong_start);
	@lopong_end = nsecs;

	//printf("exit lopong %lu on %d\n", nsecs, tid);
}

kprobe:finish_task_switch
{
	if ($1 == 0 || pid == $1) {
		@start[tid] = nsecs;

		@last_state_change[tid] = nsecs;
	}

	// record previous thread sleep time
	$prev = (struct task_struct *)arg0;

	// get the previous thread's start time
	$last = @start[$prev->pid];
	if ($1 == 0 || $prev->tgid == $1) {
		$last_state = @state[$prev->pid];
		@time_in_state_by_thread[$prev->pid, $last_state] += (nsecs - @last_state_change[tid]);
		@time_in_state[$last_state] += (nsecs - @last_state_change[$prev->pid]);
		@cputime[$prev->pid] = sum(nsecs - $last);
		delete(@start[$prev->pid]);
	}
}

END
{
	//clear(@state);
	clear(@cputime);
	clear(@last_state_change);
	delete(@timer_start);
	delete(@hipong_start);
	delete(@hiping_start);
	delete(@lopong_start);
	delete(@loping_start);
	delete(@init);
}